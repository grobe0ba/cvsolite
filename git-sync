#!/bin/sh

# This is designed to run from crontab, and mirror a cvs repository into a remote git repository.
# In my usage case, it pushes to a remote git repository which is read by a Trac instance.
# You must have git and subversion installed, as well as use public key authentication to the
# remote host if using SSH

# The remote system should run 'new-git' every hour at the top of the hour to prevent the remote
# repository from growing exponentially. This script should be run every minute EXCEPT for the
# top of the hour.

# Local crontab for 'config' user
# 1-59 * * * * /home/config/git-sync

# Remote crontab
# 0 * * * * /path/to/new-git

# If you only want to sync a module instead of the entire repository, the following will do the job
# more efficiently. You simply need to setup a git repository (for instance, clone one from github
# that you have write access to), make sure your 'origin' remote is set, and away you go. This method
# provides for incremental imports into git, so there is no growth problem as with using the full-repo
# method.
# Note: If you want the commiter names in the Git log to be correct, you'll need an authors file in
# the following format:
# commiter_username=Commiter Name <commiter@example.org>
# grobe0ba=Byron Grobe <grobe0ba@pulpie.net>

# git cvsimport -A /home/config/sync/authors -d /cvs -C /home/config/sync/module module
# cd /home/config/sync/module && git push


REMOTE_REPO_PATH=grobe0ba@mars.pulpie.net:/var/trac/git

exec >/dev/null 2>&1

PATH=/usr/local/bin:/usr/local/sbin:$PATH

cd /home/config
cp -r /cvs /home/config/
for REPO in $(cat /home/config/sec_repos | xargs); do rm -rf /home/config/cvs/$REPO; done

cvs2svn -s /home/config/svn /home/config/cvs
git clone $REMOTE_REPO_PATH /home/config/git
cd /home/config/git
git svn init -T trunk file:///home/config/svn /home/config/git
git svn fetch
git rebase remotes/origin/trunk
git push --all --force
cd ..
rm -rf /home/config/git /home/config/svn /home/config/cvs
date > /home/config/last_run
